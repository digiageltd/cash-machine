<?php
return [
    'cash.machine.header' => 'Cash Machine',
    'form.quantity' => ':quantity bills quantity (min.0 - max.5)',
    'form.amount' => 'Amount',
    'form.card.number' => 'Card Number',
    'form.card.holder' => 'Card Holder',
    'form.card.holder.placeholder' => 'Full Name',
    'form.card.expiration' => 'Card Expiration',
    'form.card.cvv' => 'CVV',
    'form.card.customer.name' => 'Customer Name',
    'form.card.account.number' => 'Account Number',
    'form.card.transfer.date' => 'Transfer Date',
    'form.button.store' => 'Store',
    'invalid.transaction.type' => 'Invalid transaction type!',
    'cash.limit.exceeded' => 'Cash limit exceeded',
    'amount.limit.exceeded' => 'Amount limit exceeded.',
    'quantity.required' => 'The quantity is required.',
    'quantity.array' => 'The quantity must be an array.',
    'quantity.1.integer' => 'The quantity for banknote 1 must be an integer.',
    'quantity.1.max' => 'The quantity for banknote 1 must be less than or equal to 5.',
    'quantity.5.integer' => 'The quantity for banknote 5 must be an integer.',
    'quantity.5.max' => 'The quantity for banknote 5 must be less than or equal to 5.',
    'quantity.10.integer' => 'The quantity for banknote 10 must be an integer.',
    'quantity.10.max' => 'The quantity for banknote 10 must be less than or equal to 5.',
    'quantity.50.integer' => 'The quantity for banknote 50 must be an integer.',
    'quantity.50.max' => 'The quantity for banknote 50 must be less than or equal to 5.',
    'quantity.100.integer' => 'The quantity for banknote 100 must be an integer.',
    'quantity.100.max' => 'The quantity for banknote 100 must be less than or equal to 5.',
    'unknown.banknotes' => 'Unknown banknotes detected!',
    'no.banknotes.detected' => 'No banknotes detected.',
    'cardNumber.required' => 'The card number is required.',
    'cardNumber.size' => 'The card number must be 16 digits long.',
    'cardNumber.regex' => 'The card number must start with 4.',
    'expirationDate.required' => 'The expiration date is required.',
    'expirationDate.date' => 'The expiration date must be a valid date.',
    'expirationDate.after_or_equal' => 'The expiration date must be at least 2 months from now.',
    'cardHolder.required' => 'The card holder is required.',
    'cvv.required' => 'The CVV is required.',
    'cvv.numeric' => 'The CVV must be a numeric value.',
    'cvv.digits' => 'The CVV must be 3 digits long.',
    'amount.required' => 'The amount is required.',
    'amount.numeric' => 'The amount must be a numeric value.',
    'transferDate.required' => 'The transfer date is required.',
    'transferDate.date' => 'The transfer date must be a valid date.',
    'transferDate.after_or_equal' => 'The transfer date must be today or a future date.',
    'customerName.required' => 'The customer name is required.',
    'accountNumber.required' => 'The account number is required.',
    'accountNumber.string' => 'The account number must be a string.',
    'accountNumber.alpha_num' => 'The account number must be alphanumeric.',
    'accountNumber.size' => 'The account number must be 6 characters long.',
    'successful.transaction' => 'Your transaction was successful!',
    'transaction.details' => 'Transaction Details',
    'transaction.id' => 'Transaction ID',
    'transaction.total.amount' => 'Total Amount',
    'transaction.inputs' => 'Transaction Inputs',
    'button.back.home' => 'Back to Home'
];
